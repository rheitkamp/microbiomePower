ADFlaresNT <- read.table("ADFlareNoTreatment.txt")
b <- read.table("ADFNTdata.txt")
rowsize <- dim(b)[1]
colsize <- dim(b)[2]
dims <- dimnames(b)
PRFNT <- matrix(nrow=rowsize, ncol=colsize, dimnames=dims)
for(i in 1:colsize){
total <- apply(X=b, MARGIN=2, sum)[i]
PR[1,i] <- b[1,i]
total <- total - b[1,i]
for(k in 2:rowsize){
PR[k,i] <- b[k,i]/total
total <- total - b[k,i]
}
}
View(PRFNT)
b <- read.table("ADFNTdata.txt")
rowsize <- dim(b)[1]
colsize <- dim(b)[2]
dims <- dimnames(b)
PRFNT <- matrix(nrow=rowsize, ncol=colsize, dimnames=dims)
for(i in 1:colsize){
total <- apply(X=b, MARGIN=2, sum)[i]
PRFNT[1,i] <- b[1,i]
total <- total - b[1,i]
for(k in 2:rowsize){
PRFNT[k,i] <- b[k,i]/total
total <- total - b[k,i]
}
}
View(PRFNT)
colsize <- dim(PRFNT)[1]
rowsize <- 10
ADFNT <- matrix(nrow=rowsize, ncol=colsize)
colnames(ADFNT) <- dimnames(PRFNT)[[1]]
rownames(ADFNT) <- rownames(ADFNT, do.NULL= FALSE, prefix= "Sample")
for (i in 1:rowsize){
total <- 1
ADFNT[i,1] <- rpearson(n=1, params=F)
total <- total - ADFNT[i,1]
R <- rpearson(n=1, params=A)
ADFNT[i,2] <- total * R
total <- total - ADFNT[i,2]
R <- rpearson(n=1, params=P)
ADFNT[i,3] <- total * R
total <- total - ADFNT[i,3]
R <- rpearson(n=1, params=B)
ADFNT[i,4] <- total * R
ADFNT[i,5] <- total - ADFNT[i,4]
}
View(ADFNT)
apply(ADFNT,1,sum)
apply(ADFNT,2,mean)
View(ADControl)
apply(ADControl,2,mean)
apply(ADControl,1,mean)
apply(ADControl,1,sum)
###Params
F <- pearsonFitML(as.numeric(PRFNT[1,]))
A <- pearsonFitML(as.numeric(PRFNT[2,]))
P <- pearsonFitML(as.numeric(PRFNT[3,]))
B <- pearsonFitML(as.numeric(PRFNT[4,]))
colsize <- dim(PRFNT)[1]
rowsize <- 10
ADFNT <- matrix(nrow=rowsize, ncol=colsize)
colnames(ADFNT) <- dimnames(PRFNT)[[1]]
rownames(ADFNT) <- rownames(ADFNT, do.NULL= FALSE, prefix= "Sample")
for (i in 1:rowsize){
total <- 1
ADFNT[i,1] <- rpearson(n=1, params=F)
total <- total - ADFNT[i,1]
R <- rpearson(n=1, params=A)
ADFNT[i,2] <- total * R
total <- total - ADFNT[i,2]
R <- rpearson(n=1, params=P)
ADFNT[i,3] <- total * R
total <- total - ADFNT[i,3]
R <- rpearson(n=1, params=B)
ADFNT[i,4] <- total * R
ADFNT[i,5] <- total - ADFNT[i,4]
}
View(ADFNT)
library(PearsonDS)
library(HMP)
set.seed(123)
###AD Controls %remaining dataset
###control <- read.table("ADcontrolsredist.txt")
###AD Control creates the %remaining dataset
b <- read.table("ADControlsData.txt")
rowsize <- dim(b)[1]
colsize <- dim(b)[2]
dims <- dimnames(b)
PR <- matrix(nrow=rowsize, ncol=colsize, dimnames=dims)
for(i in 1:colsize){
total <- apply(X=b, MARGIN=2, sum)[i]
PR[1,i] <- b[1,i]
total <- total - b[1,i]
for(k in 2:rowsize){
PR[k,i] <- b[k,i]/total
total <- total - b[k,i]
}
}
###Params
F <- pearsonFitML(as.numeric(PR[1,]))
A <- pearsonFitML(as.numeric(PR[2,]))
P <- pearsonFitML(as.numeric(PR[3,]))
B <- pearsonFitML(as.numeric(PR[4,]))
###AD Control dataset
colsize <- dim(PR)[1]
rowsize <- 10
ADControl <- matrix(nrow=rowsize, ncol=colsize)
colnames(ADControl) <- dimnames(PR)[[1]]
rownames(ADControl) <- rownames(ADControl, do.NULL= FALSE, prefix= "Sample")
for (i in 1:rowsize){
total <- 1
ADControl[i,1] <- rpearson(n=1, params=F)
total <- total - ADControl[i,1]
R <- rpearson(n=1, params=A)
ADControl[i,2] <- total * R
total <- total - ADControl[i,2]
R <- rpearson(n=1, params=P)
ADControl[i,3] <- total * R
total <- total - ADControl[i,3]
R <- rpearson(n=1, params=B)
ADControl[i,4] <- total * R
ADControl[i,5] <- total - ADControl[i,4]
}
###AD Flares with No Treatment %remaining dataset
b <- read.table("ADFNTdata.txt")
rowsize <- dim(b)[1]
colsize <- dim(b)[2]
dims <- dimnames(b)
PRFNT <- matrix(nrow=rowsize, ncol=colsize, dimnames=dims)
for(i in 1:colsize){
total <- apply(X=b, MARGIN=2, sum)[i]
PRFNT[1,i] <- b[1,i]
total <- total - b[1,i]
for(k in 2:rowsize){
PRFNT[k,i] <- b[k,i]/total
total <- total - b[k,i]
}
}
###Params
FFNT <- pearsonFitML(as.numeric(PRFNT[1,]))
AFNT <- pearsonFitML(as.numeric(PRFNT[2,]))
PFNT <- pearsonFitML(as.numeric(PRFNT[3,]))
BFNT <- pearsonFitML(as.numeric(PRFNT[4,]))
###ADFNT dataset
colsize <- dim(PRFNT)[1]
rowsize <- 10
ADFNT <- matrix(nrow=rowsize, ncol=colsize)
colnames(ADFNT) <- dimnames(PRFNT)[[1]]
rownames(ADFNT) <- rownames(ADFNT, do.NULL= FALSE, prefix= "Sample")
for (i in 1:rowsize){
total <- 1
ADFNT[i,1] <- rpearson(n=1, params=FFNT)
total <- total - ADFNT[i,1]
R <- rpearson(n=1, params=AFNT)
ADFNT[i,2] <- total * R
total <- total - ADFNT[i,2]
R <- rpearson(n=1, params=PFNT)
ADFNT[i,3] <- total * R
total <- total - ADFNT[i,3]
R <- rpearson(n=1, params=BFNT)
ADFNT[i,4] <- total * R
ADFNT[i,5] <- total - ADFNT[i,4]
}
View(ADControl)
View(ADFNT)
apply(ADControl,1,mean)
apply(ADControl,2,mean)
apply(ADFNT,2,mean)
R = 100
alpha = numeric(R)
for (i in 1:R) {
group1 = rnorm(10, mean= 0.75, sd= 1.9)
group2 = rnorm(10, mean= 2.33, sd= 1.9)
alpha[i] = t.test(group1, group2)$p.value
}
mean(alpha<0.5)
R = 100
alpha = numeric(R)
for (i in 1:R) {
group1 = rnorm(10, mean= 0.75, sd= 1.9)
group2 = rnorm(10, mean= 2.33, sd= 1.9)
alpha[i] = t.test(group1, group2)$p.value
}
mean(alpha<0.5)
data(sleep)
str(sleep)
attach(sleep)
tapply(extra,group,mean)
tapply(extra,group,sd)
tapply(extra,group,length)
t.test(extra~group)
power.t.test(n=10, delta=(2.33-.75), sd=1.9, sig.level=0.05, type="two.sample", alternative="two.sided")
detach(sleep)
1.789010 + 2.002249
(1.789010 + 2.002249).2
(1.789010 + 2.002249)/2
R = 100
alpha = numeric(R)
for (i in 1:R) {
group1 = rnorm(10, mean= .75, sd= 1.9)
group2 = rnorm(10, mean= 2.33, sd= 1.9)
alpha[i] = t.test(group1,group2)$p.value
}
mean(alpha<0.5)
attach(sleep)
R = 100
alpha = numeric(R)
for (i in 1:R) {
group1 = rnorm(10, mean= .75, sd= 1.9)
group2 = rnorm(10, mean= 2.33, sd= 1.9)
alpha[i] = t.test(group1,group2)$p.value
}
mean(alpha<0.5)
R <- 100
alpha <- numeric(R)
for (i in 1:R) {
group1 <- rnorm(10, mean= .75, sd= 1.9)
group2 <- rnorm(10, mean= 2.33, sd= 1.9)
alpha[i] <- t.test(group1,group2)$p.value
}
mean(alpha<0.5)
R <- 999
alpha <- numeric(R)
for (i in 1:R) {
group1 <- rnorm(10, mean= .75, sd= 1.9)
group2 <- rnorm(10, mean= 2.33, sd= 1.9)
alpha[i] <- t.test(group1,group2)$p.value
}
mean(alpha<0.5)
R = 999
alpha = numeric(R)
for (i in 1:R) {
group1 = rnorm(10, mean=.75, sd=1.9)
group2 = rnorm(10, mean=2.33, sd=1.9)
alpha[i] = t.test(group1,group2)$p.value
}
mean(alpha<.05)
R = 999
alpha = numeric(R)
for (i in 1:R) {
group1 = rnorm(10, mean=.75, sd=1.9)
group2 = rnorm(10, mean=2.33, sd=1.9)
alpha[i] = t.test(group1,group2)$p.value
}
mean(alpha<.05)
R <- 999
alpha <- numeric(R)
for (i in 1:R) {
group1 <- rnorm(10, mean= .75, sd= 1.9)
group2 <- rnorm(10, mean= 2.33, sd= 1.9)
alpha[i] <- t.test(group1,group2)$p.value
}
mean(alpha<0.05)
detach(sleep)
SD(ADcontrol)
std(ADcontrol)
sd(ADControl)
ad(ADFNT)
sd(ADFNT)
mean(ADControl)
mean(ADFNT)
t.test(ADControl)
t.test(ADControl~ADFNT)
(0.1870859+0.3161735)/2
power.t.test(n=10,delta=0,sd=0.2516297,sig.level=0.05,type="two.sample", alternative="two.sided")
power.t.test(n=100,delta=0,sd=0.2516297,sig.level=0.05,type="two.sample", alternative="two.sided")
ADcontrol
ADControl
mean(ADControl)
hist(ADControl)
hist(ADControl[1,])
ADControl[1,]
hist(ADControl[,1])
mean(ADControl[,1])
ADControl[,1]
install.packages("compute.es")
library("compute.es", lib.loc="C:/Users/Sylvia.Cheng/Documents/R/R-3.0.1/library")
median(ADControl)
median(ADFNT)
mean(ADControl)
mean(ADFNT)
mean(ADControl[,1])
mean(ADFNT[,1])
sd(ADControl[,1])
sd(ADFNT[,1])
mes(m.1=0.4310957,m.2=0.7906224,sd.1=0.2220954,sd.2=0.1874553,n.1=10,n.2=10)
group.data <- list(ADControl,ADFNT)
Xmcupo.effectsize(group.data)
data(saliva)
data(throat)
group.data <- list(saliva, throat)
group.data
group.AD <- list(ADControl,ADFNT)
group.AD
View(ADFNT)
###ADFNT creates %remaining dataset
b <- read.table("ADFNTdata.txt")
rowsize <- dim(b)[1]
colsize <- dim(b)[2]
dims <- dimnames(b)
PRFNT <- matrix(nrow=rowsize, ncol=colsize, dimnames=dims)
for(i in 1:colsize){
total <- apply(X=b, MARGIN=2, sum)[i]
PRFNT[1,i] <- b[1,i]
total <- total - b[1,i]
for(k in 2:rowsize){
PRFNT[k,i] <- b[k,i]/total
total <- total - b[k,i]
}
}
Xmcupo.effectsize(group.data)
Xmcupo.sevsample(group.data, 15)
Xmcupo.sevsample(group.AD, 15)
group.AD
View(ADFlaresNT)
b <- read.table("ADFNTdata.txt")
rowsize <- dim(b)[1]
colsize <- dim(b)[2]
dims <- dimnames(b)
PRFNT <- matrix(nrow=rowsize, ncol=colsize, dimnames=dims)
for(i in 1:colsize){
total <- apply(X=b, MARGIN=2, sum)[i]
PRFNT[1,i] <- b[1,i]
total <- total - b[1,i]
for(k in 2:rowsize){
PRFNT[k,i] <- b[k,i]/total
total <- total - b[k,i]
}
}
View(ADFlaresNT)
b <- read.table("ADFNTdata.txt")
rowsize <- dim(b)[1]
colsize <- dim(b)[2]
dims <- dimnames(b)
PRFNT <- matrix(nrow=rowsize, ncol=colsize, dimnames=dims)
for(i in 1:colsize){
total <- apply(X=b, MARGIN=2, sum)[i]
PRFNT[1,i] <- b[1,i]
total <- total - b[1,i]
for(k in 2:rowsize){
PRFNT[k,i] <- b[k,i]/total
total <- total - b[k,i]
}
}
View(ADFlaresNT)
b <- read.table("ADFNTdata.txt")
View(ADFlaresNT)
View(ADFlaresNT)
total <- apply(X=b, MARGIN=2, sum)[4]
fix(total)
PRFNT[1,4] <- b[1,4]
total <- total - b[1,4]
PRFNT[k,4] <- b[k,4]/total
total <- total - b[k,4]
fix(total)
View(ADFlaresNT)
###Params
FFNT <- pearsonFitML(as.numeric(PRFNT[1,]))
AFNT <- pearsonFitML(as.numeric(PRFNT[2,]))
PFNT <- pearsonFitML(as.numeric(PRFNT[3,]))
BFNT <- pearsonFitML(as.numeric(PRFNT[4,]))
###ADFNT dataset
colsize <- dim(PRFNT)[1]
rowsize <- 10
ADFNT <- matrix(nrow=rowsize, ncol=colsize)
colnames(ADFNT) <- dimnames(PRFNT)[[1]]
rownames(ADFNT) <- rownames(ADFNT, do.NULL= FALSE, prefix= "Sample")
for (i in 1:rowsize){
total <- 1
ADFNT[i,1] <- rpearson(n=1, params=FFNT)
total <- total - ADFNT[i,1]
R <- rpearson(n=1, params=AFNT)
ADFNT[i,2] <- total * R
total <- total - ADFNT[i,2]
R <- rpearson(n=1, params=PFNT)
ADFNT[i,3] <- total * R
total <- total - ADFNT[i,3]
R <- rpearson(n=1, params=BFNT)
ADFNT[i,4] <- total * R
ADFNT[i,5] <- total - ADFNT[i,4]
}
#####
View(ADFNT)
group.AD <- list(ADControl,ADFNT)
Xmcupo.effectsize(group.AD)
attach(ADControl)
Con <- data.frame(ADControl)
FNT <- data.frame(ADFNT)
group.AD <- list(Con,FNT)
Xmcupo.effectsize(group.AD)
fit.ADControl <- DM.MoM(ADControl)
effect <- MC.Xdc.statistics(group.nrs,MC,fit.ADControl$pi,,group.theta,"hnull",0.01)
effect <- MC.Xdc.statistics(group.nrs,MC,fit.ADControl$pi,group.theta,"hnull",0.01)
fit.ADControl <- DM.MoM(ADControl)
fit.ADFNT <- DM.MoM(ADFNT)
MC <- 1000
nrs1 <- rep(12000, 10)
nrs2 <- rep(12000, 10)
group.nrs <- list(nrs1,nrs2)
group.theta <- c(fit.ADControl$theta, fit.ADFNT$theta)
effect <- MC.Xdc.statistics(group.nrs,MC,fit.ADControl$pi,,group.theta,"hnull",0.01)
effect <- MC.Xdc.statistics(group.nrs,MC,fit.ADControl$pi,group.theta,"hnull",0.01)
effect
MC.Xdc.statistics(group.nrs,MC,fit.ADControl$pi,group.theta,"hnull",0.01)
effect <- MC.Xmcupo.statistics(group.nrs,MC,fit.ADControl$pi,,group.theta,"hnull",0.01)
effect <- MC.Xmcupo.statistics(group.nrs,MC,fit.ADControl$pi,group.theta,"hnull",0.01)
MC.Xmcupo.statistics(Nrs=group.nrs,MC=MC,pi0=fit.ADControl$pi,group.theta=group.theta,type="hnull",siglev=0.01)
data(saliva)
data(throat)
data(tonsils)
fit.saliva <- DM.MoM(saliva)
fit.throat <- DM.MoM(throat)
fit.tonsils <- DM.MoM(tonsils)
MC <- 1000
Nrs1 <- rep(12000, 10)
Nrs2 <- rep(12000, 19)
Nrs3 <- rep(12000, 19)
group.Nrs <- list(Nrs1, Nrs2, Nrs3)
group.theta <- c(fit.throat$theta, fit.tonsils$theta)
mc.xmcupo_check1 <- MC.Xmcupo.statistics(group.Nrs, MC, fit.saliva$pi, ,
group.theta, "hnull", 0.01)
mc.xmcupo_check1
pi_2grp <- rbind(fit.throat$pi, fit.tonsils$pi)
mc.xmcupo_check2 <- MC.Xmcupo.statistics(group.Nrs, MC, fit.saliva$pi,
pi_2grp, group.theta, "ha", 0.01)
mc.xmcupo_check2
fit.ADControl <- DM.MoM(ADControl)
fit.ADControl
View(ADControl)
ADcontrol <- data.frame(ADControl)
fit.ADControl <- DM.MoM(ADcontrol)
fit.ADControl
###AD Controls %remaining dataset
control <- read.table("ADcontrolsredist.txt")
###0-1 AD Control extracted each individual taxa dataset (proportions)
Firm <- as.numeric(control[1,])
Actino <- as.numeric(control[2,])
Proteo <- as.numeric(control[3,])
Bacter <- as.numeric(control[4,])
###Distribution parameters 0-1 (proportions)
FirmADCparam <- pearsonFitML(Firm)
ActinoADCparam <- pearsonFitML(Actino)
ProteoADCparam <- pearsonFitML(Proteo)
BacterADCparam <- pearsonFitML(Bacter)
###Histogram of taxa distributions
hist(rpearson(n=1000, params=FirmADCparam), breaks=100)
hist(rpearson(n=1000, params=ActinoADCparam), breaks=100)
hist(rpearson(n=1000, params=ProteoADCparam), breaks=100)
hist(rpearson(n=1000, params=BacterADCparam), breaks=100)
###Generates AD Control dataset (proportions)###
numrow <- 100 ###Number of subjects/samples you want to generate
numcol <- 5 ###Number of taxa
ADControl <- matrix(nrow=numrow,ncol=numcol)
ADControl <- data.frame(ADControl)
colnames(ADControl) <- c("Firmicutes", "Actinobacteria", "Proteobacteria", "Bacteroidetes", "Others") ###Names of columns
size <- dim(ADControl)[1]
for (i in 1:size){
total <- 1
###Generate number for Firmicutes
ADControl$Firmicutes[i] <- rpearson(n=1, params=FirmADCparam)
total <- total - ADControl$Firmicutes[i]
###Generate number for Actinobacteria
rActino <- rpearson(n=1, params=ActinoADCparam)
ADControl$Actinobacteria[i] <- (total*rActino)
total <- total - ADControl$Actinobacteria[i]
###Generate number for Proteobacteria
rProteo <- rpearson(n=1, params=ProteoADCparam)
ADControl$Proteobacteria[i] <- (total*rProteo)
total <- total - ADControl$Proteobacteria[i]
###Generate number for Bacteridetes
rBacter <- rpearson(n=1, params=BacterADCparam)
ADControl$Bacteroidetes[i] <- (total*rBacter)
###Remainder is placed in Others
ADControl$Others[i] <- total - ADControl$Bacteroidetes[i]
}
View(ADControl)
###Generates AD Control dataset (proportions)###
numrow <- 10 ###Number of subjects/samples you want to generate
numcol <- 5 ###Number of taxa
ADControl <- matrix(nrow=numrow,ncol=numcol)
ADControl <- data.frame(ADControl)
colnames(ADControl) <- c("Firmicutes", "Actinobacteria", "Proteobacteria", "Bacteroidetes", "Others") ###Names of columns
size <- dim(ADControl)[1]
for (i in 1:size){
total <- 1
###Generate number for Firmicutes
ADControl$Firmicutes[i] <- rpearson(n=1, params=FirmADCparam)
total <- total - ADControl$Firmicutes[i]
###Generate number for Actinobacteria
rActino <- rpearson(n=1, params=ActinoADCparam)
ADControl$Actinobacteria[i] <- (total*rActino)
total <- total - ADControl$Actinobacteria[i]
###Generate number for Proteobacteria
rProteo <- rpearson(n=1, params=ProteoADCparam)
ADControl$Proteobacteria[i] <- (total*rProteo)
total <- total - ADControl$Proteobacteria[i]
###Generate number for Bacteridetes
rBacter <- rpearson(n=1, params=BacterADCparam)
ADControl$Bacteroidetes[i] <- (total*rBacter)
###Remainder is placed in Others
ADControl$Others[i] <- total - ADControl$Bacteroidetes[i]
}
fit.ADControl <- DM.MoM(ADControl)
fit.ADControl
fit <- DM.MoM(saliva)
fit
saliva
ADControl
