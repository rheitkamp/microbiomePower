rownames(UpperRep) <- rownames(UpperRep, do.NULL= FALSE, prefix= "Sample")
size <- dim(UpperRep)[1]
for (i in 1:size){
total <- 1
###Proteobacteria
UpperRep[i,1] <- rpearsonI(n=1, a=1.71339, b=0.559312, location=0, scale=1)
total <- total - UpperRep[i,1]
###Firmicutes
r <- rpearsonI(n=1, a=4.65184, b=2.00553, location=0, scale=1)
UpperRep[i,2] <- total*r
total <- total - UpperRep[i,2]
###Bacteroidetes
r <- rpearsonI(n=1, a=13.5619, b=16.1382, location=0, scale=1)
UpperRep[i,3] <- total*r
total <- total - UpperRep[i,3]
###Actinobacteria
r <- rpearsonI(n=1, a=102.259, b=117.162, location=0, scale=1)
UpperRep[i,4] <- total*r
total <- total - UpperRep[i,4]
###Fusobacteria
r <- rpearsonI(n=1, a=17.8716, b=4.12579, location=0, scale=1)
UpperRep[i,5] <- total*r
total <- total - UpperRep[i,5]
###Cyanobacteria
r <- rpearsonI(n=1, a=7651.47, b=3797.4, location=0, scale=1)
UpperRep[i,6] <- total*r
total <- total - UpperRep[i,6]
###OD1
r <- rpearsonI(n=1, a=169010, b=169010, location=0, scale=1)
UpperRep[i,7] <- total*r
total <- total - UpperRep[i,7]
###TM7
r <- rpearsonI(n=1, a=15922.3, b=7784.23, location=0, scale=1)
UpperRep[i,8] <- total*r
total <- total - UpperRep[i,8]
###Deinococcus-Thermus
r <- rpearsonI(n=1, a=1.6435e6, b=766967, location=0, scale=1)
UpperRep[i,9] <- total*r
total <- total - UpperRep[i,9]
###Nitrospira
r <- rpearsonI(n=1, a=1.01231e7, b=4.04924e6, location=0, scale=1)
UpperRep[i,10] <- total*r
total <- total - UpperRep[i,10]
###Planctomycetes
r <- rpearsonI(n=1, a=1.95312e7, b=1.95312e7, location=0, scale=1)
UpperRep[i,11] <- total*r
###Chloroflexi
UpperRep[i,12] <- total - UpperRep[i,11]
###BRC1
UpperRep[1:numrow,13] <- 0
}
barchart(x=UpperRep,horizontal=FALSE, col=rainbow(13))
numrow <- 50
numcol <- dim(PRemainder)[2]
data <- matrix(nrow=numrow, ncol=numcol)
colnames(data) <- dimnames(PRemainder)[[2]]
rownames(data) <- rownames(data, do.NULL= FALSE, prefix= "Sample")
size <- dim(data)[1]
for (i in 1:size){
total <- 1
###BRC1
data[i,13] <- 0
total <- total - data[i,13]
###Chloroflexi
data[i,12] <- rpearsonI(n=1, a=3.99896e-02, b=3.99892e+03, location=0, scale=1)
total <- total - data[i,12]
###Planctomycetes
data[i,11] <- rpearsonI(n=1, a=1.561484e-02, b=1.561469e+03, location=0, scale=1)
total <- total - data[i,11]
###Nitrospira
data[i,10] <- rpearsonI(n=1, a=0.1735524, b=3470.8750587, location=0, scale=1)
total <- total - data[i,10]
###Deinococcus-Thermus
data[i,9] <- rpearsonI(n=1, a=0.2498125, b=1665.1668542, location=0, scale=1)
total <- total - data[i,9]
###TM7
data[i,8] <- rpearsonI(n=1, a=0.02130855, b=47.33101610, location=0, scale=1)
total <- total - data[i,8]
###OD1
data[i,7] <- rpearsonI(n=1, a=0.605873, b=903.682256, location=0, scale=1)
total <- total - data[i,7]
###Cyanobacteria
data[i,6] <- rpearsonI(n=1, a=0.3728329, b=137.7134274, location=0, scale=1)
total <- total - data[i,6]
###Fusobacteria
data[i,5] <- rpearsonI(n=1, a=0.02791087, b=1.56699613, location=0, scale=1)
total <- total - data[i, 5]
###Bacteroidetes
data[i,3] <- rpearsonI(n=1, a=0.1034732, b=2.9488343, location=0, scale=1)
total <- total - data[i,3]
###Actinobacteria
data[i,4] <- rpearsonI(n=1, a=0.2883812, b=15.0510462, location=0, scale=1)
total <- total - data[i,4]
###Firmicutes
data[i,2] <- rpearsonI(n=1, a=0.7207408, b=3.4647458, location=0, scale=1)
total <- total - data[i,2]
###Proteobacteria
data[i,1] <- total
###data[i,1] <- rpearsonI(n=1, a=1.7133906, b=0.5593122, location=0, scale=1)
}
barchart(data,horizontal=FALSE, col=rainbow(13))
View(data)
barchart(data,horizontal=FALSE, col=blues9)
barchart(data,horizontal=FALSE, col=blues9(13))
palette()
palette(blue)
palette(rainbow)
palette(rainbow())
palette(rainbow(13))
palette(0)
palette()
cl <- colors()
length(cl); cl[1:20]
length(cl. <- colors(TRUE))
## only 502 of the 657 named ones
## ----------- Show all named colors and more:
demo("colors")
barchart(data,horizontal=FALSE, col=rgb))
barchart(data,horizontal=FALSE, col=rgb)
barchart(data,horizontal=FALSE, col=rgb(0, 1, 0))
barchart(data,horizontal=FALSE, col=rgb(1:2, 1, 0))
barchart(data,horizontal=FALSE, col=rgb(2, 1, 3))
barchart(data,horizontal=FALSE, col=rgb(.3, 1, .2))
ramp <- colorRamp(c("red", "white"))
ramp
barchart(data,horizontal=FALSE, col=ramp)
ramp <- colorRampPalette(c("blue", "red"))( 13 )
barchart(data,horizontal=FALSE, col=ramp)
ramp <- colorRampPalette(c("green", "red"))( 13 )
barchart(data,horizontal=FALSE, col=ramp)
ramp <- colorRampPalette(c("green", "orange", "red"))( 13 )
barchart(data,horizontal=FALSE, col=ramp)
ramp <- colorRampPalette(c("green", "yellow", "red"))( 13 )
barchart(data,horizontal=FALSE, col=ramp)
ramp <- colorRampPalette(c("green", "blue", "red"))( 13 )
barchart(data,horizontal=FALSE, col=ramp)
ramp <- colorRampPalette(c("green"))( 13 )
barchart(data,horizontal=FALSE, col=ramp)
library(HMP)
library(PearsonDS)
library(pwr)
###AD Control Loop
library("PearsonDS")
###AD Controls %remaining dataset
control <- read.table("ADcontrolsredist.txt")
###0-100 AD Control extracted individual taxa dataset
Firm1 <- as.numeric(control[1,])*100
Actino1 <- as.numeric(control[2,])*100
Proteo1 <- as.numeric(control[3,])*100
Bacter1 <- as.numeric(control[4,])*100
###Fitting distribution 0-100
FirmADCparam <- pearsonFitML(Firm1)
ActinoADCparam <- pearsonFitML(Actino1)
ProteoADCparam <- pearsonFitML(Proteo1)
BacterADCparam <- pearsonFitML(Bacter1)
###Loop
numrow <- 100
numcol <- 5
ADControl <- matrix(nrow=numrow,ncol=numcol)
ADControl <- data.frame(ADControl)
colnames(ADControl) <- c("Firmicutes", "Actinobacteria", "Proteobacteria", "Bacteroidetes", "Others")
size <- dim(ADControl)[1]
for (i in 1:size){
total <- 100
###Generate number for Firmicutes
ADControl$Firmicutes[i] <- rpearson(n=1, params=FirmADCparam)
total <- total - ADControl$Firmicutes[i]
###Generate number for Actinobacteria
rActino <- rpearson(n=1, params=ActinoADCparam)
ADControl$Actinobacteria[i] <- (total*rActino)/100
total <- total - ADControl$Actinobacteria[i]
###Generate number for Proteobacteria
rProteo <- rpearson(n=1, params=ProteoADCparam)
ADControl$Proteobacteria[i] <- (total*rProteo)/100
total <- total - ADControl$Proteobacteria[i]
###Generate number for Bacteridetes
rBacter <- rpearson(n=1, params=BacterADCparam)
ADControl$Bacteroidetes[i] <- (total*rBacter)/100
###Remainder is placed in Others
ADControl$Others[i] <- total - ADControl$Bacteroidetes[i]
}
View(ADControl)
C.alpha.multinomial(ADcontrol)
C.alpha.multinomial(ADControl)
data(saliva)
### Change the number of display digits so our output looks better
defaultd <- .Options$digits
options(digits=5)
calpha_check <- C.alpha.multinomial(saliva)
calpha_check
options(digits=defaultd) ### Set the number of digits back for the user
ADControl1000 <- ADControl1000*1000
ADControl1000 <- ADControl*1000
View(ADControl1000)
C.alpha.multinomial(ADControl1000)
salvia
saliva
data(throat)
data(tongue)
data(tonsil)
data(tonsils)
C.alpha.multinomial(throat)
C.alpha.multinomial(saliva)
C.alpha.multinomial(tongue)
C.alpha.multinomial(tonsils)
pioest(saliva)
install.packages("mc2d")
library(mc2d)
ndvar(1000)
conc <- 10
library(HMP)
Library(PearsonDS)
library(PearsonDS)
###AD Controls %remaining dataset
control <- read.table("ADcontrolsredist.txt")
###0-1 AD Control extracted each individual taxa dataset (proportions)
Firm <- as.numeric(control[1,])
Actino <- as.numeric(control[2,])
Proteo <- as.numeric(control[3,])
Bacter <- as.numeric(control[4,])
###Distribution parameters 0-1 (proportions)
FirmADCparam <- pearsonFitML(Firm)
ActinoADCparam <- pearsonFitML(Actino)
ProteoADCparam <- pearsonFitML(Proteo)
BacterADCparam <- pearsonFitML(Bacter)
###Histogram of taxa distributions
hist(rpearson(n=1000, params=FirmADCparam), breaks=100)
hist(rpearson(n=1000, params=ActinoADCparam), breaks=100)
hist(rpearson(n=1000, params=ProteoADCparam), breaks=100)
hist(rpearson(n=1000, params=BacterADCparam), breaks=100)
###Generates AD Control dataset (proportions)###
numrow <- 100 ###Number of subjects/samples you want to generate
numcol <- 5 ###Number of taxa
ADControl <- matrix(nrow=numrow,ncol=numcol)
ADControl <- data.frame(ADControl)
colnames(ADControl) <- c("Firmicutes", "Actinobacteria", "Proteobacteria", "Bacteroidetes", "Others") ###Names of columns
size <- dim(ADControl)[1]
for (i in 1:size){
total <- 1
###Generate number for Firmicutes
ADControl$Firmicutes[i] <- rpearson(n=1, params=FirmADCparam)
total <- total - ADControl$Firmicutes[i]
###Generate number for Actinobacteria
rActino <- rpearson(n=1, params=ActinoADCparam)
ADControl$Actinobacteria[i] <- (total*rActino)
total <- total - ADControl$Actinobacteria[i]
###Generate number for Proteobacteria
rProteo <- rpearson(n=1, params=ProteoADCparam)
ADControl$Proteobacteria[i] <- (total*rProteo)
total <- total - ADControl$Proteobacteria[i]
###Generate number for Bacteridetes
rBacter <- rpearson(n=1, params=BacterADCparam)
ADControl$Bacteroidetes[i] <- (total*rBacter)
###Remainder is placed in Others
ADControl$Others[i] <- total - ADControl$Bacteroidetes[i]
}
###AD Flares with No Treatment %remaining dataset
ADFlaresNT <- read.table("ADFlareNoTreatment.txt")
###0-1 AD Flare No Treatment extracted each individual taxa dataset
FirmFNT <- as.numeric(ADFlaresNT[1,])
ActinoFNT <- as.numeric(ADFlaresNT[2,])
ProteoFNT <- as.numeric(ADFlaresNT[3,])
BacterFNT <- as.numeric(ADFlaresNT[4,])
###Distribution parameters 0-1 (proportions)
FirmFNTparam <- pearsonFitML(FirmFNT)
ActinoFNTparam <- pearsonFitML(ActinoFNT)
ProteoFNTparam <- pearsonFitML(ProteoFNT)
BacterFNTparam <- pearsonFitML(BacterFNT)
###Generates AD Control dataset (proportions)###
numrow <- 100 ###Number of subjects/samples you want to generate
numcol <- 5 ###Number of taxa
ADFNT <- matrix(nrow=numrow,ncol=numcol)
ADFNT <- data.frame(ADFNT)
colnames(ADFNT) <- c("Firmicutes", "Actinobacteria", "Proteobacteria", "Bacteroidetes", "Others") ###Names of columns
size <- dim(ADFNT)[1]
for (i in 1:size){
total <- 1
###Generate number for Firmicutes
ADFNT$Firmicutes[i] <- rpearson(n=1, params=FirmFNTparam)
total <- total - ADFNT$Firmicutes[i]
###Generate number for Actinobacteria
rActino <- rpearson(n=1, params=ActinoFNTparam)
ADFNT$Actinobacteria[i] <- (total*rActino)
total <- total - ADFNT$Actinobacteria[i]
###Generate number for Proteobacteria
rProteo <- rpearson(n=1, params=ProteoFNTparam)
ADFNT$Proteobacteria[i] <- (total*rProteo)
total <- total - ADFNT$Proteobacteria[i]
###Generate number for Bacteridetes
rBacter <- rpearson(n=1, params=BacterFNTparam)
ADFNT$Bacteroidetes[i] <- (total*rBacter)
###Remainder is placed in Others
ADFNT$Others[i] <- total - ADFNT$Bacteroidetes[i]
}
View(ADFNT)
View(ADControl)
ADControl500 <- ADControl8500
ADControl500 <- ADControl*500
ADFNt500 <- ADFNT*500
fit.ADControl500 <- DM.MoM(ADControl500)
fit.ADFNT500 <- DM.MoM(ADFNT500)
fit.ADFNT500 <- DM.MoM(ADFNt500)
MC <- 1000
Nrs1 <- rep(500,10)
Nrs2 <- rep(500,10)
group.Nrs <- list(Nrs1, Nrs2)
TS <- MC.Xdc.statistics(group.NRS, MC, fit.ADControl500$gamma, 2, "hnull", .05)
TS <- MC.Xdc.statistics(group.Nrs, MC, fit.ADControl500$gamma, 2, "hnull", .05)
TS
group.alpha <- rbind(fit.ADControl500$gamma, fit.ADFNT500$gamma)
View(group.alpha)
TS <- MC.Xdc.statistics(group.Nrs, MC, fit.ADFNT500$gamma, 2, "hnull", .05)
TS
P <- MC.Xdc.statistics(group.Nrs, MC, group.alpha, 2, "ha", .05)
P
Nrs1 <- rep(500,5)
Nrs2 <- rep(500,5)
group.Nrs <- list(Nrs1, Nrs2)
P <- MC.Xdc.statistics(group.Nrs, MC, group.alpha, 2, "ha", .05)
P
Nrs2 <- rep(500,20)
Nrs1 <- rep(500,20)
group.Nrs <- list(Nrs1, Nrs2)
P <- MC.Xdc.statistics(group.Nrs, MC, group.alpha, 2, "ha", .05)
P
source('~/.active-rstudio-document')
ADControl500 <- ADControl*500
ADFNT500 <- ADFNT*500
fit.ADControl500 <- DM.MoM(ADControl500)
fit.ADFNT500 <- DM.MoM(ADFNT500)
MC <- 1000
Nrs1 <- rep(500,1)
Nrs2 <- rep(500,1)
group.Nrs <- list(Nrs1, Nrs2)
group.alphap <- rbind(fit.ADControl500$gamma, fit.ADFNT500$gamma)
P <- MC.Xdc.statistics(group.Nrs, MC, group.alphap, 2, "ha", 0.05, "mom")
View(group.alphap)
P <- MC.Xdc.statistics(group.Nrs, MC, group.alphap, 2, "ha", 0.05)
Nrs1 <- rep(500,5)
Nrs2 <- rep(500,5)
group.Nrs <- list(Nrs1, Nrs2)
P <- MC.Xdc.statistics(group.Nrs, MC, group.alphap, 2, "ha", 0.05)
P
Nrs1 <- rep(500,10)
Nrs2 <- rep(500,10)
group.Nrs <- list(Nrs1, Nrs2)
group.alphap <- rbind(fit.ADControl500$gamma, fit.ADFNT500$gamma)
P <- MC.Xdc.statistics(group.Nrs, MC, group.alphap, 2, "ha", 0.05)
P
set.seed(123)
control <- read.table("ADcontrolsredist.txt")
###0-1 AD Control extracted each individual taxa dataset (proportions)
Firm <- as.numeric(control[1,])
Actino <- as.numeric(control[2,])
Proteo <- as.numeric(control[3,])
Bacter <- as.numeric(control[4,])
<<<<<<< HEAD
###Fitting distribution 0-1
unlist(pearsonFitML(Firm))
unlist(pearsonFitML(Actino))
unlist(pearsonFitML(Proteo))
unlist(pearsonFitML(Bacter))
###fitted distribution taxa generation 0-1
Firmicutes <- rpearsonI(n=1000, a=0.9977008, b=2.1005555, location=0.1063188, scale=0.9611892)
Actinobacteria<- rpearsonI(n=1000, a=0.99874103, b=2.47718315, location=0.09764036, scale=1.03623409)
Proteobacteria <- rpearsonI(n=1000, a=1.3711653, b=1.4778528, location=0.4542903, scale=0.4134097)
Bacteroidetes <- rpearsonI(n=1000, a=2.2113205, b=0.6628346, location=-0.2730789, scale=1.2522455)
###Histograms of generated taxa 0-1
hist(Firmicutes,100)
hist(Actinobacteria,100)
hist(Proteobacteria,100)
hist(Bacteroidetes, 100)
###0-100 AD Control extracted individual taxa dataset
Firm1 <- as.numeric(control[1,])*100
Actino1 <- as.numeric(control[2,])*100
Proteo1 <- as.numeric(control[3,])*100
Bacter1 <- as.numeric(control[4,])*100
###Fitting distribution 0-100
unlist(pearsonFitML(Firm1))
unlist(pearsonFitML(Actino1))
unlist(pearsonFitML(Proteo1))
unlist(pearsonFitML(Bacter1))
###fitted distribution taxa generation 0-100
Firmicutes1 <- rpearsonI(n=1000, a=0.9970149, b=2.0062602, location=10.6318818, scale=89.3067879)
hist(Firmicutes1, 100)
hist(Actinobacteria1, 100)
Firmicutes1 <- rpearsonI(n=1000, a=0.9970149, b=2.0062602, location=10.6318818, scale=89.3067879)
Actinobacteria1 <- rpearsonII(n=1000, a=0.840323, location=9.764036, scale=81.726210)
Proteobacteria1 <- rpearsonI(n=1000, a=1.371166,  b=1.477854, location=45.429029, scale=41.340968)
Bacteroidetes1 <- rpearsonI(n=1000, a=2.2098166, b=0.6798847, location=-12.4973479, scale=110.4140148)
###Histograms 0-100
hist(Firmicutes1, 100)
hist(Actinobacteria1, 100)
hist(Proteobacteria1, 100)
hist(Bacteroidetes1, 100)
unlist(pearsonFitML(Actino))
unlist(pearsonFitML(Actino1))
pearsonsMSC
pearsonMSC(Actino)
pearsonMSC(Actino1)
a <- rpearsonI(1000 ,0.9542805,  2.3447883,  9.7640358, 98.5426251)
hist(a)
hist(a, bins=100)
hist(a, 100)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
Prot1
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
mean <- 75
sd <- 23
m <- (1-mean)/mean
n <- 1 + m
alpha <- (1/n)(m/(sd^2*n^2)-1)
alpha <- 1
beta <- m * alpha
params <- c(alpha, beta)
return(params)
alpha <- function(n, m, sd){(1/n)(m/(sd^2*n^2)-1)}
getalpha <- function(n, m, sd){(1/n)(m/(sd^2*n^2)-1)}
alpha <- getalpha(n, m, sd)
source('~/.active-rstudio-document')
norm(2:10)
(function(x, y){ z <- x^2 + y^2; x+y+z })(0:7, 1)
source('~/.active-rstudio-document')
getBetaParams(mean, sd)
sd^2
m
n
1/n
sd^2*n^2
m/sd^2*n^2
m/sd^2*n^2-1
source('~/.active-rstudio-document')
getBetaParams(mean, sd)
getBetaParams2 <- function(mean, sd) {
m <- (1-mean)/mean
n <- 1 + m
alpha <- (1/n)*(m/(sd^2*n^2)-1)
beta <- m * alpha
params <- c(alpha, beta)
return(params)
}
getBetaParams2(75, 23)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
y
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
y
source('~/.active-rstudio-document')
y
=======
###Distribution parameters 0-1 (proportions)
FirmADCparam <- pearsonFitML(Firm)
ActinoADCparam <- pearsonFitML(Actino)
ProteoADCparam <- pearsonFitML(Proteo)
BacterADCparam <- pearsonFitML(Bacter)
###Generates AD Control dataset (proportions)###
numrow <- 10 ###Number of subjects/samples you want to generate
numcol <- 5 ###Number of taxa
ADControl <- matrix(nrow=numrow,ncol=numcol)
ADControl <- data.frame(ADControl)
colnames(ADControl) <- c("Firmicutes", "Actinobacteria", "Proteobacteria", "Bacteroidetes", "Others") ###Names of columns
size <- dim(ADControl)[1]
for (i in 1:size){
total <- 1
###Generate number for Firmicutes
ADControl$Firmicutes[i] <- rpearson(n=1, params=FirmADCparam)
total <- total - ADControl$Firmicutes[i]
###Generate number for Actinobacteria
rActino <- rpearson(n=1, params=ActinoADCparam)
ADControl$Actinobacteria[i] <- (total*rActino)
total <- total - ADControl$Actinobacteria[i]
###Generate number for Proteobacteria
rProteo <- rpearson(n=1, params=ProteoADCparam)
ADControl$Proteobacteria[i] <- (total*rProteo)
total <- total - ADControl$Proteobacteria[i]
###Generate number for Bacteridetes
rBacter <- rpearson(n=1, params=BacterADCparam)
ADControl$Bacteroidetes[i] <- (total*rBacter)
###Remainder is placed in Others
ADControl$Others[i] <- total - ADControl$Bacteroidetes[i]
}
###AD Flares with No Treatment %remaining dataset
ADFlaresNT <- read.table("ADFlareNoTreatment.txt")
###0-1 AD Flare No Treatment extracted each individual taxa dataset
FirmFNT <- as.numeric(ADFlaresNT[1,])
ActinoFNT <- as.numeric(ADFlaresNT[2,])
ProteoFNT <- as.numeric(ADFlaresNT[3,])
BacterFNT <- as.numeric(ADFlaresNT[4,])
###Distribution parameters 0-1 (proportions)
FirmFNTparam <- pearsonFitML(FirmFNT)
ActinoFNTparam <- pearsonFitML(ActinoFNT)
ProteoFNTparam <- pearsonFitML(ProteoFNT)
BacterFNTparam <- pearsonFitML(BacterFNT)
###Generates AD Control dataset (proportions)###
numrow <- 10 ###Number of subjects/samples you want to generate
numcol <- 5 ###Number of taxa
ADFNT <- matrix(nrow=numrow,ncol=numcol)
ADFNT <- data.frame(ADFNT)
colnames(ADFNT) <- c("Firmicutes", "Actinobacteria", "Proteobacteria", "Bacteroidetes", "Others") ###Names of columns
size <- dim(ADFNT)[1]
for (i in 1:size){
total <- 1
###Generate number for Firmicutes
ADFNT$Firmicutes[i] <- rpearson(n=1, params=FirmFNTparam)
total <- total - ADFNT$Firmicutes[i]
###Generate number for Actinobacteria
rActino <- rpearson(n=1, params=ActinoFNTparam)
ADFNT$Actinobacteria[i] <- (total*rActino)
total <- total - ADFNT$Actinobacteria[i]
###Generate number for Proteobacteria
rProteo <- rpearson(n=1, params=ProteoFNTparam)
ADFNT$Proteobacteria[i] <- (total*rProteo)
total <- total - ADFNT$Proteobacteria[i]
###Generate number for Bacteridetes
rBacter <- rpearson(n=1, params=BacterFNTparam)
ADFNT$Bacteroidetes[i] <- (total*rBacter)
###Remainder is placed in Others
ADFNT$Others[i] <- total - ADFNT$Bacteroidetes[i]
}
ADControl500 <- ADControl*500
ADFNT500 <- ADFNT*500
View(ADControl500)
View(ADFNT500)
fit.ADControl500 <- DM.MoM(ADControl500)
fit.ADFNT500 <- DM.MoM(ADFNT500)
MC <- 1000
Nrs1 <- rep(500,10)
Nrs2 <- rep(500,10)
group.Nrs <- list(Nrs1, Nrs2)
group.alphap <- rbind(fit.ADControl500$gamma, fit.ADFNT500$gamma)
P <- MC.Xdc.statistics(group.Nrs, MC, group.alphap, 2, "ha", 0.05)
P
Nrs1 <- rep(500,2)
Nrs2 <- rep(500,2)
group.Nrs <- list(Nrs1, Nrs2)
P <- MC.Xdc.statistics(group.Nrs, MC, group.alphap, 2, "ha", 0.05)
P
Nrs1 <- rep(500,1)
Nrs2 <- rep(500,1)
group.Nrs <- list(Nrs1, Nrs2)
P <- MC.Xdc.statistics(group.Nrs, MC, group.alphap, 2, "ha", 0.05)
Nrs1 <- rep(500,3)
Nrs2 <- rep(500,3)
group.Nrs <- list(Nrs1, Nrs2)
P <- MC.Xdc.statistics(group.Nrs, MC, group.alphap, 2, "ha", 0.05)
P
Nrs1 <- rep(500,5)
Nrs2 <- rep(500,5)
group.Nrs <- list(Nrs1, Nrs2)
P <- MC.Xdc.statistics(group.Nrs, MC, group.alphap, 2, "ha", 0.05)
P
P <- MC.Xmc.statistics(group.Nrs, MC, fit.ADControl$pi, group.pi, group.theta, "ha")
group.pi <- rbind(fit.ADControl500$pi, fit.ADFNT500$pi)
group.theta <- c(0.01, 0.05)
P <- MC.Xmc.statistics(group.Nrs, MC, fit.ADControl$pi, group.pi, group.theta, "ha")
P <- MC.Xmc.statistics(group.Nrs, MC, fit.ADControl500$pi, group.pi, group.theta, "ha")
P
P <- MC.Xmc.statistics(group.Nrs, MC, fit.ADFNT500$pi, group.pi, group.theta, "ha")
P
group.theta <- c(fit.ADControl500$theta, fit.ADFNT500$theta)
P <- MC.Xmc.statistics(group.Nrs, MC, fit.ADFNT500$pi, group.pi, group.theta, "ha")
P
P <- MC.Xmc.statistics(group.Nrs, MC, fit.ADControl$pi, group.pi, group.theta, "ha")
P <- MC.Xmc.statistics(group.Nrs, MC, fit.ADControl500$pi, group.pi, group.theta, "ha")
P
MC.Xdc.statistics
install.packages("phylosim")
data(sleep)
sleep
str(sleep)
attach(sleep)
tapply(extra, group, mean)
tapply(extra, group, sd)
tapply(extra, group, length)
t.test(extra~group)
power.t.test(n=10, delta=(2.33-.75), sd=1.9, sig.level=.05,type="two.sample", alternative="two.sided")
R = 999
> alpha = numeric(R)
> for (i in 1:R) {
+ group1 = rnorm(10, mean=.75, sd=1.9)
+ group2 = rnorm(10, mean=2.33, sd=1.9)
+ alpha[i] = t.test(group1,group2)$p.value
+ }
R = 999
> alpha <- numeric(R)
> for (i in 1:R) {
+ group1 <- rnorm(10, mean=.75, sd=1.9)
+ group2 <- rnorm(10, mean=2.33, sd=1.9)
+ alpha[i] <- t.test(group1,group2)$p.value
+ }
R = 999
> alpha <- numeric(R)
> for (i in 1:R) {
group1 <- rnorm(10, mean=.75, sd=1.9)
group2 <- rnorm(10, mean=2.33, sd=1.9)
alpha[i] <- t.test(group1,group2)$p.value
}
R <-999
alpha <- numeric(R)
for (i in 1:R) {
group1 <- rnorm(10, mean=.75, sd=1.9)
group2 <- rnorm(10, mean=2.33, sd=1.9)
alpha[i] <- t.test(group1,group2)$p.value
}
mean(alpha<.05)
detach(sleep)
>>>>>>> cb5619b9707198db63f802169d71f357f8537e0f
