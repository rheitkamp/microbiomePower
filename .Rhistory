m <- (1-mean)/mean
n <- 1 + m
alpha <- (1/n)*(m/(sd^2*n^2)-1)
beta <- m * alpha
params <- list(type=1, a=alpha, b=beta, location=0, scale=1)
return(params)
}
(pcontrolmean <- colMeans(pcontrol))
pcontrolmean[,1]
pcontrolmean[1]
pcontrolmean[,1]
pcontrolmean[1,]
matrix(pcontrolmean)
matrix(pcontrolmean, dimnames=list(colnames(pcontrolmeans), "mean"))
matrix(pcontrolmean, dimnames=list(colnames(pcontrolmean), "mean"))
colnames(pcontrolmean)
matrix(pcontrolmean, dimnames=list(colnames(pcontrol), "mean"))
(pcontrolmean <- matrix(pcontrolmean, dimnames=list(colnames(pcontrol), "mean")))
(pbaselinemean <- matrix(pbaselinemean, dimnames=list(colnames(pbaseline), "mean")))
(pflarentmean <- matrix(pflarentmean, dimnames=list(colnames(pflarent), "mean")))
(pflaretmean <- matrix(pflaretman, dimnames=list(colnames(pflaret), "mean")))
(pflaretmean <- matrix(pflaretmean, dimnames=list(colnames(pflaret), "mean")))
(ppostflaremean <- matrix(colMeans(ppostflare), dimnames=list(colnames(ppostflare), "mean")))
(pflaretmean <- matrix(colMeans(pflaretmean), dimnames=list(colnames(pflaret), "mean")))
(pflaretmean <- matrix(colMeans(pflaret), dimnames=list(colnames(pflaret), "mean")))
(pflarentmean <- matrix(colMeans(pflarent), dimnames=list(colnames(pflarent), "mean")))
(pbaselinemean <- matrix(colMeans(pbaseline), dimnames=list(colnames(pbaseline), "mean")))
(pcontrolmean <- matrix(colMeans(pcontrol), dimnames=list(colnames(pcontrol), "mean")))
(pcontrolSD <- apply(pcontrol,2,sd))
(pcontrolSD <- matrix(apply(pcontrol,2,sd), dimnames=list(colnames(pcontol), "SD")))
(pcontrolSD <- matrix(apply(pcontrol,2,sd), dimnames=list(colnames(pcontrol), "SD")))
(pbaselineSD <- matrix(apply(pbaseline,2,sd), dimnames=list(colnames(pbaseline), "SD")))
(pflaretSD <- matrix(apply(flaret,2,sd), dimnames=list(colnames(pflaret), "SD")))
(ppostflareSD <- matrix(apply(ppostflare,2,sd), dimnames=list(colnames(ppostflare), "SD")))
(pcontrolSD <- matrix(apply(pcontrol,2,sd), dimnames=list(colnames(pcontrol), "SD")))
(pbaselineSD <- matrix(apply(pbaseline,2,sd), dimnames=list(colnames(pbaseline), "SD")))
(pflarentSD <- matrix(apply(flarent,2,sd), dimnames=list(colnames(pflarent), "SD")))
(pflaretSD <- matrix(apply(flaret,2,sd), dimnames=list(colnames(pflaret), "SD")))
(ppostflareSD <- matrix(apply(ppostflare,2,sd), dimnames=list(colnames(ppostflare), "SD")))
(pcontrolmean <- matrix(colMeans(pcontrol), dimnames=list(colnames(pcontrol), "Mean")))
(pbaselinemean <- matrix(colMeans(pbaseline), dimnames=list(colnames(pbaseline), "Mean")))
(pflarentmean <- matrix(colMeans(pflarent), dimnames=list(colnames(pflarent), "Mean")))
(pflaretmean <- matrix(colMeans(pflaret), dimnames=list(colnames(pflaret), "Mean")))
(ppostflaremean <- matrix(colMeans(ppostflare), dimnames=list(colnames(ppostflare), "Mean")))
(controlmsd <- rbind(controlmean, controlSD))
(pcontrolmean <- matrix(colMeans(pcontrol), dimnames=list(colnames(pcontrol), "Mean")))
(pbaselinemean <- matrix(colMeans(pbaseline), dimnames=list(colnames(pbaseline), "Mean")))
(pflarentmean <- matrix(colMeans(pflarent), dimnames=list(colnames(pflarent), "Mean")))
(pflaretmean <- matrix(colMeans(pflaret), dimnames=list(colnames(pflaret), "Mean")))
(ppostflaremean <- matrix(colMeans(ppostflare), dimnames=list(colnames(ppostflare), "Mean")))
(pcontrolSD <- matrix(apply(pcontrol,2,sd), dimnames=list(colnames(pcontrol), "SD")))
(pbaselineSD <- matrix(apply(pbaseline,2,sd), dimnames=list(colnames(pbaseline), "SD")))
(pflarentSD <- matrix(apply(flarent,2,sd), dimnames=list(colnames(pflarent), "SD")))
(pflaretSD <- matrix(apply(flaret,2,sd), dimnames=list(colnames(pflaret), "SD")))
(ppostflareSD <- matrix(apply(ppostflare,2,sd), dimnames=list(colnames(ppostflare), "SD")))
(controlmean <- matrix(colMeans(control),dimnames=list(colnames(control), "Mean")))
(controlmean <- matrix(colMeans(control),dimnames=list(colnames(control), "Mean")))
(controlmean <- matrix(colMeans(control), dimnames=list(colnames(control), "Mean")))
(baselinemean <- matrix(colMeans(baseline), dimnames=list(colnames(baseline), "Mean")))
(flarentmean <- matrix(colMeans(flarent), dimnames=list(colnames(flarent), "Mean")))
(flaretmean <- matrix(colMeans(flaret), dimnames=list(colnames(flaret), "Mean")))
(postflaremean <- matrix(colMeans(postflare), dimnames=list(colnames(postflare), "Mean")))
(controlSD <- matrix(apply(control,2,sd)))
(controlSD <- matrix(apply(control,2,sd), dimnames=list(colnames(control), "Mean")))
(baselineSD <- matrix(apply(baseline,2,sd), dimnames=list(colnames(baseline), "Mean")))
(flarentSD <- matrix(apply(flarent,2,sd), dimnames=list(colnames(flarent), "Mean")))
(flaretSD <- matrix(apply(flarent,2,sd), dimnames=list(colnames(flaret, "Mean"))))
(flaretSD <- matrix(apply(flarent,2,sd), dimnames=list(colnames(flaret), "Mean")))
(postflareSD <- matrix(apply(postflare,2,sd), dimnames=list(colnames(postflare), "Mean")))
(controlmsd <- rbind(controlmean, controlSD))
(controlmsd <- cbind(controlmean, controlSD))
(controlSD <- matrix(apply(control,2,sd), dimnames=list(colnames(control), "SD")))
(baselineSD <- matrix(apply(baseline,2,sd), dimnames=list(colnames(baseline), "SD")))
(flarentSD <- matrix(apply(flarent,2,sd), dimnames=list(colnames(flarent), "SD")))
(flaretSD <- matrix(apply(flarent,2,sd), dimnames=list(colnames(flaret), "SD")))
(postflareSD <- matrix(apply(postflare,2,sd), dimnames=list(colnames(postflare), "SD")))
(controlmsd <- cbind(controlmean, controlSD))
pcontrolmean <- colMeans(pcontrol)
pcontrolSD <- apply(pcontrol,2,sd)
(pcontrolmsd <- cbind(pcontrolmean, pcontrolSD))
(pcontrolmean <- matrix(colMeans(pcontrol), dimnames=list(colnames(pcontrol), "Mean")))
(pcontrolSD <- matrix(apply(pcontrol,2,sd), dimnames=list(colnames(pcontrol), "SD")))
(pcontrolmsd <- cbind(pcontrolmean, pcontrolSD))
(baselinemsd <- cbind(baselinemean, baselineSD))
(pbaselinemsd <- cbind(pbaselinemean, pbaselineSD))
(flarentmsd <- cbind(flarentmean, flarentSD))
(pflarentmsd <- cbind(pflarentmean, pflarentSD))
(flaretmsd <- cbind(flaretmean, flaretSD))
(pflaretmsd <- cbind(pflaretmean, pflaretSD))
(postflaremsd <- cbind(baselinemean, baselineSD))
(ppostflaremsd <- cbind(ppostflaremean, ppostflareSD))
(postflaremsd <- cbind(postflaremean, postflareSD))
(ppostflaremsd <- cbind(ppostflaremean, ppostflareSD))
getBetaParams(controlmsd[1,1], controlmsd[1,2])
(CparFirm <- getBetaParams(controlmsd[1,1], controlmsd[1,2]))
(CparActino <- getBetaParams(controlmsd[2,1], controlmsd[2,2]))
(CparProteo <- getBetaParams(controlmsd[3,1], controlmsd[3,2]))
(CparBact <- getBetaParams(controlmsd[4,1], controlmsd[4,2]))
(pcparfirm <- getBetaParams(pcontrolmsd[1,1], pcontrolmsd[1,2]))
(pcparactino <- getBetaParams(pcontrolmsd[2,1], pcontrolmsd[2,2]))
(pcparproteo <- getBetaParams(pcontrolmsd[3,1], pcontrolmsd[3,2]))
(pcparbact <- getBetaParams(pcontrolmsd[4,1], pcontrolmsd[4,2]))
(pbparfirm <- getBetaParams(pbaselinemsd[1,1], pbaselinemsd[1,2]))
(pbparactino <- getBetaParams(pbaselinemsd[2,1], pbaselinemsd[2,2]))
(pbparproteo <- getBetaParams(pbaselinemsd[3,1], pbaselinemsd[3,2]))
(pbparbact <- getBetaParams(pbaselinemsd[4,1], pbaselinemsd[4,2]))
(pFNTparfirm <- getBetaParams(pflarentmsd[1,1], pflarentmsd[1,2]))
(pFNTparactino <- getBetaParams(pflarentmsd[2,1], pflarentmsd[2,2]))
(pFNTparproteo <- getBetaParams(pflarentmsd[3,1], pflarentmsd[3,2]))
(pFNTparbact <- getBetaParams(pflarentmsd[4,1], pflarentmsd[4,2]))
ppostflare
(ppfparfirm <- getBetaParams(ppostflaremsd[1,1], ppostflaremsd[1,2]))
(ppfparactino <- getBetaParams(ppostflaremsd[2,1], ppostflaremsd[2,2]))
(ppfparproteo <- getBetaParams(ppostflaremsd[3,1], ppostflaremsd[3,2]))
(ppfparbact <- getBetaParams(ppostflaremsd[4,1], ppostflaremsd[4,2]))
(ppfparbact <- getBetaParams(ppostflaremsd[4,1], ppostflaremsd[4,2]))
numrow <- 25
numcol <- dim(pcontrolmsd)[1]
Cdata <- matrix(nrow=numrow,ncol=numcol)
colnames(pcdata) <- dimnames(pcontrolmsd)[[1]]
rownames(pcdata) <- rownames(pcdata, do.NULL= FALSE, prefix= "Sample")
size <- dim(pcdata)[1]
for (i in 1:size){
total <- 1
###Firmicutes
pcdata[i,1] <- rpearson(n=1, params=pcparfirm)
total <- total - pcdata[i,1]
###Actinobacteria
r <- rpearson(n=1, params=pcparactino)
pcdata[i,2] <- total*r
total <- total - pcdata[i,2]
###Proteobacteria
r <- rpearson(n=1, params=pcparproteo)
pcdata[i,3] <- total*r
total <- total - pcdata[i,3]
###Bacteriodetes
r <- rpearson(n=1, params=pcparbact)
pcdata[i,4] <- total*r
total <- total - pcdata[i,4]
###Other
pcdata[i,5] <- total
}
pcdata
numrow <- 25
numcol <- dim(pcontrolmsd)[1]
pcdata <- matrix(nrow=numrow,ncol=numcol)
colnames(pcdata) <- dimnames(pcontrolmsd)[[1]]
rownames(pcdata) <- rownames(pcdata, do.NULL= FALSE, prefix= "Sample")
size <- dim(pcdata)[1]
for (i in 1:size){
total <- 1
###Firmicutes
pcdata[i,1] <- rpearson(n=1, params=pcparfirm)
total <- total - pcdata[i,1]
###Actinobacteria
r <- rpearson(n=1, params=pcparactino)
pcdata[i,2] <- total*r
total <- total - pcdata[i,2]
###Proteobacteria
r <- rpearson(n=1, params=pcparproteo)
pcdata[i,3] <- total*r
total <- total - pcdata[i,3]
###Bacteriodetes
r <- rpearson(n=1, params=pcparbact)
pcdata[i,4] <- total*r
total <- total - pcdata[i,4]
###Other
pcdata[i,5] <- total
}
pcdata
colMean(pcdata)
colMeans(pcdata)
apply(pcdata,2,sd)
(controlmean <- colMeans(control))
(controlSD <- apply(control,2,sd))
numrow <- 25
numcol <- dim(pcontrolmsd)[1]
pcdata <- matrix(nrow=numrow,ncol=numcol)
colnames(pcdata) <- dimnames(pcontrolmsd)[[1]]
rownames(pcdata) <- rownames(pcdata, do.NULL= FALSE, prefix= "Sample")
size <- dim(pcdata)[1]
for (i in 1:size){
total <- 1
###Firmicutes
pcdata[i,1] <- rpearson(n=1, params=pcparfirm)
total <- total - pcdata[i,1]
###Actinobacteria
r <- rpearson(n=1, params=pcparactino)
pcdata[i,2] <- total*r
total <- total - pcdata[i,2]
###Proteobacteria
r <- rpearson(n=1, params=pcparproteo)
pcdata[i,3] <- total*r
total <- total - pcdata[i,3]
###Bacteriodetes
r <- rpearson(n=1, params=pcparbact)
pcdata[i,4] <- total*r
total <- total - pcdata[i,4]
###Other
pcdata[i,5] <- total
}
pcdata
colMeans(pcdata)
apply(pcdata,2,sd)
controlmean
controlSD
numrow <- 25
numcol <- dim(pcontrolmsd)[1]
pcdata <- matrix(nrow=numrow,ncol=numcol)
colnames(pcdata) <- dimnames(pcontrolmsd)[[1]]
rownames(pcdata) <- rownames(pcdata, do.NULL= FALSE, prefix= "Sample")
size <- dim(pcdata)[1]
for (i in 1:size){
total <- 1
###Firmicutes
pcdata[i,1] <- rpearson(n=1, params=pcparfirm)
total <- total - pcdata[i,1]
###Actinobacteria
r <- rpearson(n=1, params=pcparactino)
pcdata[i,2] <- total*r
total <- total - pcdata[i,2]
###Proteobacteria
r <- rpearson(n=1, params=pcparproteo)
pcdata[i,3] <- total*r
total <- total - pcdata[i,3]
###Bacteriodetes
r <- rpearson(n=1, params=pcparbact)
pcdata[i,4] <- total*r
total <- total - pcdata[i,4]
###Other
pcdata[i,5] <- total
}
colMeans(pcdata)
apply(pcdata,2,sd)
controlmean
controlSD
numrow <- 25
numcol <- dim(pcontrolmsd)[1]
pcdata <- matrix(nrow=numrow,ncol=numcol)
colnames(pcdata) <- dimnames(pcontrolmsd)[[1]]
rownames(pcdata) <- rownames(pcdata, do.NULL= FALSE, prefix= "Sample")
size <- dim(pcdata)[1]
for (i in 1:size){
total <- 1
###Firmicutes
pcdata[i,1] <- rpearson(n=1, params=pcparfirm)
total <- total - pcdata[i,1]
###Actinobacteria
r <- rpearson(n=1, params=pcparactino)
pcdata[i,2] <- total*r
total <- total - pcdata[i,2]
###Proteobacteria
r <- rpearson(n=1, params=pcparproteo)
pcdata[i,3] <- total*r
total <- total - pcdata[i,3]
###Bacteriodetes
r <- rpearson(n=1, params=pcparbact)
pcdata[i,4] <- total*r
total <- total - pcdata[i,4]
###Other
pcdata[i,5] <- total
}
colMeans(pcdata)
apply(pcdata,2,sd)
numrow <- 25
numcol <- dim(pcontrolmsd)[1]
pcdata <- matrix(nrow=numrow,ncol=numcol)
colnames(pcdata) <- dimnames(pcontrolmsd)[[1]]
rownames(pcdata) <- rownames(pcdata, do.NULL= FALSE, prefix= "Sample")
size <- dim(pcdata)[1]
for (i in 1:size){
total <- 1
###Firmicutes
pcdata[i,1] <- rpearson(n=1, params=pcparfirm)
total <- total - pcdata[i,1]
###Actinobacteria
r <- rpearson(n=1, params=pcparactino)
pcdata[i,2] <- total*r
total <- total - pcdata[i,2]
###Proteobacteria
r <- rpearson(n=1, params=pcparproteo)
pcdata[i,3] <- total*r
total <- total - pcdata[i,3]
###Bacteriodetes
r <- rpearson(n=1, params=pcparbact)
pcdata[i,4] <- total*r
total <- total - pcdata[i,4]
###Other
pcdata[i,5] <- total
}
apply(pcdata,2,sd)
colMeans(pcdata)
numcol <- dim(pcontrolmsd)[1]
pcdata <- matrix(nrow=numrow,ncol=numcol)
colnames(pcdata) <- dimnames(pcontrolmsd)[[1]]
rownames(pcdata) <- rownames(pcdata, do.NULL= FALSE, prefix= "Sample")
size <- dim(pcdata)[1]
for (i in 1:size){
total <- 1
###Firmicutes
pcdata[i,1] <- rpearson(n=1, params=pcparfirm)
total <- total - pcdata[i,1]
###Actinobacteria
r <- rpearson(n=1, params=pcparactino)
pcdata[i,2] <- total*r
total <- total - pcdata[i,2]
###Proteobacteria
r <- rpearson(n=1, params=pcparproteo)
pcdata[i,3] <- total*r
total <- total - pcdata[i,3]
###Bacteriodetes
r <- rpearson(n=1, params=pcparbact)
pcdata[i,4] <- total*r
total <- total - pcdata[i,4]
###Other
pcdata[i,5] <- total
}
colMeans(pcdata)
apply(pcdata,2,sd)
controlmean
controlSD
numrow <- 25
numcol <- dim(pcontrolmsd)[1]
pcdata <- matrix(nrow=numrow,ncol=numcol)
colnames(pcdata) <- dimnames(pcontrolmsd)[[1]]
rownames(pcdata) <- rownames(pcdata, do.NULL= FALSE, prefix= "Sample")
size <- dim(pcdata)[1]
for (i in 1:size){
total <- 1
###Firmicutes
pcdata[i,1] <- rpearson(n=1, params=pcparfirm)
total <- total - pcdata[i,1]
###Actinobacteria
r <- rpearson(n=1, params=pcparactino)
pcdata[i,2] <- total*r
total <- total - pcdata[i,2]
###Proteobacteria
r <- rpearson(n=1, params=pcparproteo)
pcdata[i,3] <- total*r
total <- total - pcdata[i,3]
###Bacteriodetes
r <- rpearson(n=1, params=pcparbact)
pcdata[i,4] <- total*r
total <- total - pcdata[i,4]
###Other
pcdata[i,5] <- total
}
colMeans(pcdata)
apply(pcdata,2,sd)
controlSD
(Control <- read.table("ADControls.txt"))
(ControlMean <- matrix(rowMeans(Control), nrow=1, ncol=5, dimnames=list("Mean", rownames(Control))))
(ControlMP <- Premainder(ControlMean*100))
pcontrolmean
numrow <- 25
numcol <- dim(pcontrolmsd)[1]
pcdata <- matrix(nrow=numrow,ncol=numcol)
colnames(pcdata) <- dimnames(pcontrolmsd)[[1]]
rownames(pcdata) <- rownames(pcdata, do.NULL= FALSE, prefix= "Sample")
size <- dim(pcdata)[1]
for (i in 1:size){
total <- 1
###Firmicutes
pcdata[i,1] <- rpearson(n=1, params=pcparfirm)
total <- total - pcdata[i,1]
###Actinobacteria
r <- rpearson(n=1, params=pcparactino)
pcdata[i,2] <- total*r
total <- total - pcdata[i,2]
###Proteobacteria
r <- rpearson(n=1, params=pcparproteo)
pcdata[i,3] <- total*r
total <- total - pcdata[i,3]
###Bacteriodetes
r <- rpearson(n=1, params=pcparbact)
pcdata[i,4] <- total*r
total <- total - pcdata[i,4]
###Other
pcdata[i,5] <- total
}
apply(pcdata,2,sd)
controlmean
apply(pcdata,2,sd)
controlSD
pcontrol
Fallmean <- read.table("UpperRFall.txt")
Fallmean
FallSD <- read.table("FallSD.txt")
FallSD
read.table("UpperRepSpring.txt")
collectParameters <- function(datamatrix) {
taxa <- rownames(datamatrix)
parameterNames <- list("type","a","b","location","scale")
BetaParameters <- matrix(data = NA, nrow = length(taxa), ncol = length(parameterNames), dimnames=list(taxa, parameterNames))
for (i in 1:nrow(BetaParameters)) {
parameters <- getBetaParams(datamatrix[i,1],datamatrix[i,2]);
BetaParameters[i,] <- c(parameters$type, parameters$a, parameters$b, parameters$location, parameters$scale)
}
return(BetaParameters)
}
etBetaParams <- function(mean, sd) {
m <- (1-mean)/mean
n <- 1 + m
alpha <- (1/n)*(m/(sd^2*n^2)-1)
beta <- m * alpha
params <- list(type=1, a=alpha, b=beta, location=0, scale=1)
return(params)
}
remainder <- function(x) {
rowsize <- dim(x)[1]
colsize <- dim(x)[2]
dims <- dimnames(x)[[2]]
y <- matrix(nrow=rowsize, ncol=colsize)
for(i in 1:rowsize){
total <- apply(X=x,MARGIN=1,sum)[i]
y[i,1] <- x[i,1]/100
total <- total - x[i,1]
for(k in 2:colsize){
y[i,k] <- x[i,k]/ total
total <- total - x[i,k]
}
}
return(matrix(y,nrow=colsize, ncol=rowsize, dimnames=list(dims, "Mean")))
}
spaceFill <- function (dataMatrix, distParameters, subjects){
subjects <- subjects #number of subjects for rows
taxa <- dim(dataMatrix)[1] #number of taxa for columns
Cdata <- matrix(nrow=subjects,ncol=taxa)
taxaNames <- dimnames(dataMatrix)[[1]]
colnames(Cdata) <- taxaNames #list taxa names in columns
rownames(Cdata) <- rownames(Cdata, do.NULL= FALSE, prefix= "Sample") #call rows samples
for (i in 1:subjects){
total <- 1
for (j in 1:(taxa-1)){
r <- rpearson(n=1, params=distParameters[j,]);
Cdata[i,j] <- total * r
total <- total - Cdata[i,j];
}
Cdata[i,taxa] <- total;
}
return(Cdata)
}
source('~/Desktop/SIMULATION/R/Data simulatuon/R data simulation/microbiomePower/ADdata/ADDataSimulationRae20130926.R')
a <- simulateBrokenStick("ADControls.txt","Controls", 5000)
setwd("~/Desktop/SIMULATION/R/Data simulatuon/R data simulation/microbiomePower/ADdata")
a <- simulateBrokenStick("ADControls.txt","Controls", 5000)
simulateBrokenStick("ADControls.txt","Controls", 5000)
collectParameters(datamatrix="ADControl.txt")
simulateBrokenStick <- function(inputFilename,outputLabel,numberSubjects=25) {
set.seed(1234) #always use the same seed during testing
library(PearsonDS) #use pearsons distribution library (beta distribution)
library(HMP) #use HMP package
(rawData <- read.table(inputFilename)) #read data from file
colSums(rawData) ##!!validate that column sums equal 1!!
#get standard deviation of each taxon in the data set
(rawStdDiv <- matrix(apply(rawData,1,sd),dimnames=list(rownames(rawData), "SD")))
#get arithmetic mean of each taxon in the dataset
(rawMean <- matrix(rowMeans(rawData), nrow=1, ncol=5, dimnames=list("Mean", rownames(rawData))))
(meanPercentRemainder <- Premainder(rawMean*100)) #get percent remainder for mean proportions of taxa
(pR_MeanStDev <- cbind(meanPercentRemainder, rawStdDiv)) #combine percent remainder means with raw stdev
parameters <- collectParameters(pR_MeanStDev) #calculate parameters of percent remainder beta dist
brokenStickSim <- spaceFill(pR_MeanStDev,parameters,numberSubjects) #run the simulation
Barchart.data(brokenStickSim, title=outputLabel) #display data as barchart
print('Standard Deviation, simulated vs. provided data')
print(apply(brokenStickSim,2,sd)) #compare simulated standard deviations
print(apply(rawData,1,sd)) #to raw reported standard deviations
print('Mean, simulated vs. provided data')
print(colMeans(brokenStickSim)) #compare simulated means
print(rowMeans(rawData)) #to raw reported means
print('')
print('')
return(BrokenStickSim)
}
simulateBrokenStick("ADControls.txt","Controls", 5000)
simulateBrokenStick <- function(inputFilename,outputLabel,numberSubjects=25) {
set.seed(1234) #always use the same seed during testing
library(PearsonDS) #use pearsons distribution library (beta distribution)
library(HMP) #use HMP package
(rawData <- read.table(inputFilename)) #read data from file
colSums(rawData) ##!!validate that column sums equal 1!!
#get standard deviation of each taxon in the data set
(rawStdDiv <- matrix(apply(rawData,1,sd),dimnames=list(rownames(rawData), "SD")))
#get arithmetic mean of each taxon in the dataset
(rawMean <- matrix(rowMeans(rawData), nrow=1, ncol=5, dimnames=list("Mean", rownames(rawData))))
(meanPercentRemainder <- Premainder(rawMean*100)) #get percent remainder for mean proportions of taxa
(pR_MeanStDev <- cbind(meanPercentRemainder, rawStdDiv)) #combine percent remainder means with raw stdev
parameters <- collectParameters(pR_MeanStDev) #calculate parameters of percent remainder beta dist
brokenStickSim <- spaceFill(pR_MeanStDev,parameters,numberSubjects) #run the simulation
Barchart.data(brokenStickSim, title=outputLabel) #display data as barchart
print('Standard Deviation, simulated vs. provided data')
print(apply(brokenStickSim,2,sd)) #compare simulated standard deviations
print(apply(rawData,1,sd)) #to raw reported standard deviations
print('Mean, simulated vs. provided data')
print(colMeans(brokenStickSim)) #compare simulated means
print(rowMeans(rawData)) #to raw reported means
print('')
print('')
return(brokenStickSim)
}
simulateBrokenStick("ADControls.txt","Controls", 5000)
a <- simulateBrokenStick("ADControls.txt","Controls", 50)
View(a)
control <- simulateBrokenStick("ADControls.txt","Controls", 50)
baseline <- simulateBrokenStick("ADBaseline.txt","ADBaseline", 300)
flarent <- simulateBrokenStick("ADFlareNT.txt","ADFlare", 300)
flareit <- simulateBrokenStick("ADFlareT.txt","ADTreatment", 300)
control <- simulateBrokenStick("ADControls.txt","Controls", 50)
baseline <- simulateBrokenStick("ADBaseline.txt","ADBaseline", 50)
flarent <- simulateBrokenStick("ADFlareNT.txt","ADFlare", 50)
flareit <- simulateBrokenStick("ADFlareT.txt","ADTreatment", 50)
postflare <- simulateBrokenStick("ADPostFlare.txt","ADPost", 50)
postflare <- simulateBrokenStick("ADPostFlare.txt","ADPost", 50)
