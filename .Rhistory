fit.ADControl
###AD Controls %remaining dataset
control <- read.table("ADcontrolsredist.txt")
###0-1 AD Control extracted each individual taxa dataset (proportions)
Firm <- as.numeric(control[1,])
Actino <- as.numeric(control[2,])
Proteo <- as.numeric(control[3,])
Bacter <- as.numeric(control[4,])
###Distribution parameters 0-1 (proportions)
FirmADCparam <- pearsonFitML(Firm)
ActinoADCparam <- pearsonFitML(Actino)
ProteoADCparam <- pearsonFitML(Proteo)
BacterADCparam <- pearsonFitML(Bacter)
###Histogram of taxa distributions
hist(rpearson(n=1000, params=FirmADCparam), breaks=100)
hist(rpearson(n=1000, params=ActinoADCparam), breaks=100)
hist(rpearson(n=1000, params=ProteoADCparam), breaks=100)
hist(rpearson(n=1000, params=BacterADCparam), breaks=100)
###Generates AD Control dataset (proportions)###
numrow <- 100 ###Number of subjects/samples you want to generate
numcol <- 5 ###Number of taxa
ADControl <- matrix(nrow=numrow,ncol=numcol)
ADControl <- data.frame(ADControl)
colnames(ADControl) <- c("Firmicutes", "Actinobacteria", "Proteobacteria", "Bacteroidetes", "Others") ###Names of columns
size <- dim(ADControl)[1]
for (i in 1:size){
total <- 1
###Generate number for Firmicutes
ADControl$Firmicutes[i] <- rpearson(n=1, params=FirmADCparam)
total <- total - ADControl$Firmicutes[i]
###Generate number for Actinobacteria
rActino <- rpearson(n=1, params=ActinoADCparam)
ADControl$Actinobacteria[i] <- (total*rActino)
total <- total - ADControl$Actinobacteria[i]
###Generate number for Proteobacteria
rProteo <- rpearson(n=1, params=ProteoADCparam)
ADControl$Proteobacteria[i] <- (total*rProteo)
total <- total - ADControl$Proteobacteria[i]
###Generate number for Bacteridetes
rBacter <- rpearson(n=1, params=BacterADCparam)
ADControl$Bacteroidetes[i] <- (total*rBacter)
###Remainder is placed in Others
ADControl$Others[i] <- total - ADControl$Bacteroidetes[i]
}
View(ADControl)
###Generates AD Control dataset (proportions)###
numrow <- 10 ###Number of subjects/samples you want to generate
numcol <- 5 ###Number of taxa
ADControl <- matrix(nrow=numrow,ncol=numcol)
ADControl <- data.frame(ADControl)
colnames(ADControl) <- c("Firmicutes", "Actinobacteria", "Proteobacteria", "Bacteroidetes", "Others") ###Names of columns
size <- dim(ADControl)[1]
for (i in 1:size){
total <- 1
###Generate number for Firmicutes
ADControl$Firmicutes[i] <- rpearson(n=1, params=FirmADCparam)
total <- total - ADControl$Firmicutes[i]
###Generate number for Actinobacteria
rActino <- rpearson(n=1, params=ActinoADCparam)
ADControl$Actinobacteria[i] <- (total*rActino)
total <- total - ADControl$Actinobacteria[i]
###Generate number for Proteobacteria
rProteo <- rpearson(n=1, params=ProteoADCparam)
ADControl$Proteobacteria[i] <- (total*rProteo)
total <- total - ADControl$Proteobacteria[i]
###Generate number for Bacteridetes
rBacter <- rpearson(n=1, params=BacterADCparam)
ADControl$Bacteroidetes[i] <- (total*rBacter)
###Remainder is placed in Others
ADControl$Others[i] <- total - ADControl$Bacteroidetes[i]
}
fit.ADControl <- DM.MoM(ADControl)
fit.ADControl
fit <- DM.MoM(saliva)
fit
saliva
ADControl
library(HMP)
library(PearsonDS)
control <- read.table("ADcontrolsredist.txt")
Firm <- as.numeric(control[1,])
Actino <- as.numeric(control[2,])
Proteo <- as.numeric(control[3,])
Bacter <- as.numeric(control[4,])
FirmADCparam <- pearsonFitML(Firm)
ActinoADCparam <- pearsonFitML(Actino)
ProteoADCparam <- pearsonFitML(Proteo)
BacterADCparam <- pearsonFitML(Bacter)
numrow <- 100 ###Number of subjects/samples you want to generate
numcol <- 5 ###Number of taxa
ADControl <- matrix(nrow=numrow,ncol=numcol)
ADControl <- data.frame(ADControl)
colnames(ADControl) <- c("Firmicutes", "Actinobacteria", "Proteobacteria", "Bacteroidetes", "Others") ###Names of columns
size <- dim(ADControl)[1]
for (i in 1:size){
total <- 1
###Generate number for Firmicutes
ADControl$Firmicutes[i] <- rpearson(n=1, params=FirmADCparam)
total <- total - ADControl$Firmicutes[i]
###Generate number for Actinobacteria
rActino <- rpearson(n=1, params=ActinoADCparam)
ADControl$Actinobacteria[i] <- (total*rActino)
total <- total - ADControl$Actinobacteria[i]
###Generate number for Proteobacteria
rProteo <- rpearson(n=1, params=ProteoADCparam)
ADControl$Proteobacteria[i] <- (total*rProteo)
total <- total - ADControl$Proteobacteria[i]
###Generate number for Bacteridetes
rBacter <- rpearson(n=1, params=BacterADCparam)
ADControl$Bacteroidetes[i] <- (total*rBacter)
###Remainder is placed in Others
ADControl$Others[i] <- total - ADControl$Bacteroidetes[i]
}
View(ADControl)
View(control)
set.seed(123)
###AD Control creates the %remaining dataset
b <- read.table("ADControlsData.txt")
rowsize <- dim(b)[1]
colsize <- dim(b)[2]
dims <- dimnames(b)
PR <- matrix(nrow=rowsize, ncol=colsize, dimnames=dims)
for(i in 1:colsize){
total <- apply(X=b, MARGIN=2, sum)[i]
PR[1,i] <- b[1,i]
total <- total - b[1,i]
for(k in 2:rowsize){
PR[k,i] <- b[k,i]/total
total <- total - b[k,i]
}
}
View(b)
View(PR)
F <- pearsonFitML(as.numeric(PR[1,]))
A <- pearsonFitML(as.numeric(PR[2,]))
P <- pearsonFitML(as.numeric(PR[3,]))
B <- pearsonFitML(as.numeric(PR[4,]))
colsize <- dim(PR)[1]
rowsize <- 100
ADControl <- matrix(nrow=rowsize, ncol=colsize)
colnames(ADControl) <- dimnames(PR)[[1]]
rownames(ADControl) <- rownames(ADControl, do.NULL= FALSE, prefix= "Sample")
for (i in 1:rowsize){
total <- 1
ADControl[i,1] <- rpearson(n=1, params=F)
total <- total - ADControl[i,1]
R <- rpearson(n=1, params=A)
ADControl[i,2] <- total * R
total <- total - ADControl[i,2]
R <- rpearson(n=1, params=P)
ADControl[i,3] <- total * R
total <- total - ADControl[i,3]
R <- rpearson(n=1, params=B)
ADControl[i,4] <- total * R
ADControl[i,5] <- total - ADControl[i,4]
}
View(ADControl)
for (i in 1:rowsize){
total <- 1
ADControl[i,1] <- rpearson(n=1, params=F)
total <- total - ADControl[i,1]
R <- rpearson(n=1, params=A)
ADControl[i,2] <- total * R
total <- total - ADControl[i,2]
R <- rpearson(n=1, params=P)
ADControl[i,3] <- total * R
total <- total - ADControl[i,3]
R <- rpearson(n=1, params=B)
ADControl[i,4] <- total * R
ADControl[i,5] <- total - ADControl[i,4]
}
colsize <- dim(PR)[1]
rowsize <- 10
ADControl <- matrix(nrow=rowsize, ncol=colsize)
colnames(ADControl) <- dimnames(PR)[[1]]
rownames(ADControl) <- rownames(ADControl, do.NULL= FALSE, prefix= "Sample")
for (i in 1:rowsize){
total <- 1
ADControl[i,1] <- rpearson(n=1, params=F)
total <- total - ADControl[i,1]
R <- rpearson(n=1, params=A)
ADControl[i,2] <- total * R
total <- total - ADControl[i,2]
R <- rpearson(n=1, params=P)
ADControl[i,3] <- total * R
total <- total - ADControl[i,3]
R <- rpearson(n=1, params=B)
ADControl[i,4] <- total * R
ADControl[i,5] <- total - ADControl[i,4]
}
View(ADControl)
Control <- data.frame(ADControl)
DM.MoM(Control)
Control <- data.matrix(Control)
DM.MoM(Control)
Control
F <- pearsonFitML(as.numeric(PR[1,]))
A <- pearsonFitML(as.numeric(PR[2,]))
P <- pearsonFitML(as.numeric(PR[3,]))
B <- pearsonFitML(as.numeric(PR[4,]))
colsize <- dim(PR)[1]
rowsize <- 10
ADControl <- matrix(nrow=rowsize, ncol=colsize)
colnames(ADControl) <- dimnames(PR)[[1]]
for (i in 1:rowsize){
total <- 1
ADControl[i,1] <- rpearson(n=1, params=F)
total <- total - ADControl[i,1]
R <- rpearson(n=1, params=A)
ADControl[i,2] <- total * R
total <- total - ADControl[i,2]
R <- rpearson(n=1, params=P)
ADControl[i,3] <- total * R
total <- total - ADControl[i,3]
R <- rpearson(n=1, params=B)
ADControl[i,4] <- total * R
ADControl[i,5] <- total - ADControl[i,4]
}
View(ADControl)
DM.MoM(ADControl)
ADControl*500
View(ADControl)
View(Control)
Control500 <- Control*500
DM.MoM(Control500)
b <- read.table("ADControlsData.txt")
apply(b,2,sum)
View(b)
b <- read.table("ADFNTdata.txt")
apply(b,2,sum)
b <- read.table("ADFNTdata.txt")
apply(b,2,sum)
rowsize <- dim(b)[1]
colsize <- dim(b)[2]
dims <- dimnames(b)
PRFNT <- matrix(nrow=rowsize, ncol=colsize, dimnames=dims)
for(i in 1:colsize){
total <- apply(X=b, MARGIN=2, sum)[i]
PRFNT[1,i] <- b[1,i]
total <- total - b[1,i]
for(k in 2:rowsize){
PRFNT[k,i] <- b[k,i]/total
total <- total - b[k,i]
}
}
View(PRFNT)
###Params
FFNT <- pearsonFitML(as.numeric(PRFNT[1,]))
AFNT <- pearsonFitML(as.numeric(PRFNT[2,]))
PFNT <- pearsonFitML(as.numeric(PRFNT[3,]))
BFNT <- pearsonFitML(as.numeric(PRFNT[4,]))
###ADFNT dataset
colsize <- dim(PRFNT)[1]
rowsize <- 10
ADFNT <- matrix(nrow=rowsize, ncol=colsize)
colnames(ADFNT) <- dimnames(PRFNT)[[1]]
rownames(ADFNT) <- rownames(ADFNT, do.NULL= FALSE, prefix= "Sample")
for (i in 1:rowsize){
total <- 1
ADFNT[i,1] <- rpearson(n=1, params=FFNT)
total <- total - ADFNT[i,1]
R <- rpearson(n=1, params=AFNT)
ADFNT[i,2] <- total * R
total <- total - ADFNT[i,2]
R <- rpearson(n=1, params=PFNT)
ADFNT[i,3] <- total * R
total <- total - ADFNT[i,3]
R <- rpearson(n=1, params=BFNT)
ADFNT[i,4] <- total * R
ADFNT[i,5] <- total - ADFNT[i,4]
}
View(ADFNT)
###ADFNT dataset
colsize <- dim(PRFNT)[1]
rowsize <- 10
ADFNT <- matrix(nrow=rowsize, ncol=colsize)
colnames(ADFNT) <- dimnames(PRFNT)[[1]]
rownames(ADFNT) <- rownames(ADFNT, do.NULL= FALSE, prefix= "Sample")
for (i in 1:rowsize){
total <- 1
ADFNT[i,1] <- rpearson(n=1, params=FFNT)
total <- total - ADFNT[i,1]
R <- rpearson(n=1, params=AFNT)
ADFNT[i,2] <- total * R
total <- total - ADFNT[i,2]
R <- rpearson(n=1, params=PFNT)
ADFNT[i,3] <- total * R
total <- total - ADFNT[i,3]
R <- rpearson(n=1, params=BFNT)
ADFNT[i,4] <- total * R
ADFNT[i,5] <- total - ADFNT[i,4]
}
View(ADFNT)
b <- read.table("ADControlsData.txt")
View(ADFNT)
apply(b,2,sum)
###ADFNT creates %remaining dataset
b <- read.table("ADFNTdata.txt")
rowsize <- dim(b)[1]
colsize <- dim(b)[2]
dims <- dimnames(b)
PRFNT <- matrix(nrow=rowsize, ncol=colsize, dimnames=dims)
for(i in 1:colsize){
total <- apply(X=b, MARGIN=2, sum)[i]
PRFNT[1,i] <- b[1,i]
total <- total - b[1,i]
for(k in 2:rowsize){
PRFNT[k,i] <- b[k,i]/total
total <- total - b[k,i]
}
}
View(PRFNT)
###ADFNT dataset
colsize <- dim(PRFNT)[1]
rowsize <- 100
ADFNT <- matrix(nrow=rowsize, ncol=colsize)
colnames(ADFNT) <- dimnames(PRFNT)[[1]]
rownames(ADFNT) <- rownames(ADFNT, do.NULL= FALSE, prefix= "Sample")
for (i in 1:rowsize){
total <- 1
ADFNT[i,1] <- rpearson(n=1, params=FFNT)
total <- total - ADFNT[i,1]
R <- rpearson(n=1, params=AFNT)
ADFNT[i,2] <- total * R
total <- total - ADFNT[i,2]
R <- rpearson(n=1, params=PFNT)
ADFNT[i,3] <- total * R
total <- total - ADFNT[i,3]
R <- rpearson(n=1, params=BFNT)
ADFNT[i,4] <- total * R
ADFNT[i,5] <- total - ADFNT[i,4]
}
View(ADFNT)
View(ADFNT)
View(PRFNT)
View(PRFNT)
save(PRFNT)
save(list=PRFNT,file="PRFNT.txt")
save(list=PRFNT,file="PRFNT.exl")
save(list=PRFNT,file="PRFNT.exe")
saveRDS(ADFNT,"ADFNT.rds")
saveRDS(ADFNT,"ADFNT.txt")
write.table(PRFNT, "PRFNT")
write.table(PRFNT, "PRFNT.csv")
write.table(PRFNT, "PRFNT.txt")
x <- data.frame(a = I("a \" quote"), b = pi)
x
write.table(PRFNT, "PRFNT.csv",sep=",")
rpearson(n=1, params=FFNT)
rpearson(n=1, params=AFNT)
rpearson(n=1, params=PFNT)
rpearson(n=1, params=BFNT)
colsize <- dim(PRFNT)[1]
rowsize <- 100
ADFNT <- matrix(nrow=rowsize, ncol=colsize)
colnames(ADFNT) <- dimnames(PRFNT)[[1]]
rownames(ADFNT) <- rownames(ADFNT, do.NULL= FALSE, prefix= "Sample")
for (i in 1:rowsize){
total <- 1
ADFNT[i,1] <- rpearson(n=1, params=FFNT)
total <- total - ADFNT[i,1]
R <- rpearson(n=1, params=AFNT)
ADFNT[i,2] <- total * R
total <- total - ADFNT[i,2]
R <- rpearson(n=1, params=PFNT)
ADFNT[i,3] <- total * R
total <- total - ADFNT[i,3]
R <- rpearson(n=1, params=BFNT)
ADFNT[i,4] <- total * R
ADFNT[i,5] <- total - ADFNT[i,4]
}
View(ADFNT)
a <- ADFNT*100
View(a)
###0-1 AD Flare No Treatment extracted each individual taxa dataset
FirmFNT <- as.numeric(PRFNT[1,])
ActinoFNT <- as.numeric(PRFNT[2,])
ProteoFNT <- as.numeric(PRFNT[3,])
BacterFNT <- as.numeric(PRFNT[4,])
###Distribution parameters 0-1 (proportions)
FirmFNTparam <- pearsonFitML(FirmFNT)
ActinoFNTparam <- pearsonFitML(ActinoFNT)
ProteoFNTparam <- pearsonFitML(ProteoFNT)
BacterFNTparam <- pearsonFitML(BacterFNT)
hist(rpearson(n=1000, params=FirmFNTparam), breaks=100)
hist(rpearson(n=1000, params=ActinoFNTparam), breaks=100)
hist(rpearson(n=1000, params=ProteoFNTparam), breaks=100)
hist(rpearson(n=1000, params=BacterFNTparam), breaks=100)
hist(rpearson(n=1000, params=FirmFNTparam), breaks=100)
max(rpearson(n=1000, params=FirmFNTparam))
hist(rpearson(n=1000, params=ProteoFNTparam), breaks=100)
hist(rpearson(n=1000, params=BacterFNTparam), breaks=100)
numrow <- 100 ###Number of subjects/samples you want to generate
numcol <- 5 ###Number of taxa
ADFNT <- matrix(nrow=numrow,ncol=numcol)
ADFNT <- data.frame(ADFNT)
colnames(ADFNT) <- c("Firmicutes", "Actinobacteria", "Proteobacteria", "Bacteroidetes", "Others") ###Names of columns
size <- dim(ADFNT)[1]
for (i in 1:size){
total <- 1
###Generate number for Firmicutes
ADFNT$Firmicutes[i] <- rpearson(n=1, params=FirmFNTparam)
total <- total - ADFNT$Firmicutes[i]
###Generate number for Actinobacteria
rActino <- rpearson(n=1, params=ActinoFNTparam)
ADFNT$Actinobacteria[i] <- (total*rActino)
total <- total - ADFNT$Actinobacteria[i]
###Generate number for Proteobacteria
rProteo <- rpearson(n=1, params=ProteoFNTparam)
ADFNT$Proteobacteria[i] <- (total*rProteo)
total <- total - ADFNT$Proteobacteria[i]
###Generate number for Bacteridetes
rBacter <- rpearson(n=1, params=BacterFNTparam)
ADFNT$Bacteroidetes[i] <- (total*rBacter)
###Remainder is placed in Others
ADFNT$Others[i] <- total - ADFNT$Bacteroidetes[i]
}
View(ADFNT)
hist(rpearson(n=1000, params=ActinoFNTparam), breaks=100)
hist(rpearson(n=1000, params=ProteoFNTparam), breaks=100)
min(rpearson(n=1000, params=ProteoFNTparam))
min(rpearson(n=1000, params=ActinoFNTparam))
ActinoFNTparam <- pearsonFitML(ActinoFNT)
hist(rpearson(n=1000, params=ActinoFNTparam), breaks=100)
ActinoFNTparam <- pearsonFitML(ActinoFNT)
hist(rpearson(n=1000, params=ActinoFNTparam), breaks=100)
ActinoFNTparam <- pearsonFitML(ActinoFNT)
hist(rpearson(n=1000, params=ActinoFNTparam), breaks=100)
ActinoFNT
ADcontrolReads <- read.table("ADcontrolReads.txt")
ADflareReads <- read.table("ADflareReads.txt")
View(ADcontrolReads)
View(ADflareReads)
View(ADcontrolReads)
View(ADflareReads)
View(ADflareReads)
b <- read.table("ADControlsData.txt")
rowsize <- dim(b)[1]
colsize <- dim(b)[2]
dims <- dimnames(b)
PR <- matrix(nrow=rowsize, ncol=colsize, dimnames=dims)
for(i in 1:colsize){
total <- apply(X=b, MARGIN=2, sum)[i]
PR[1,i] <- b[1,i]
total <- total - b[1,i]
for(k in 2:rowsize){
PR[k,i] <- b[k,i]/total
total <- total - b[k,i]
}
}
View(ADcontrolReads)
read.table("Controlreads.txt")
ADcontrolReads <- read.table("Controlreads.txt")
A <- read.table("Controlreads.txt")
ADControlReads <- matrix(nrow=22,ncol=5)
A[1,]
ADControlReads[,1] <- A[1,]
View(ADcontrolReads)
View(A)
View(ADcontrolReads)
View(PR)
View(A)
View(ADcontrolReads)
View(A)
View(ADflareReads)
View(ADcontrolReads)
ADControlReads <- matrix(nrow=22,ncol=5)
ADControlReads[,1] <- A[1,]
A[-1]
ADcontrolReads <- matrix(nrow=22,ncol=5)
size <- 5
for (i in 1:size){
ADcontrolReads[1,i] <- A[i,1]
}
View(ADcontrolReads)
View(A)
View(ADcontrolReads)
ADcontrolReads <- matrix(nrow=22,ncol=5)
size <- 5
k <- 1:22
for (i in 1:size){
ADcontrolReads[k,i] <- A[k,1]
}
View(ADcontrolReads)
View(A)
View(ADcontrolReads)
ADcontrolReads <- matrix(nrow=22,ncol=5)
size <- 5
k <- 1
for (i in 1:size){
ADcontrolReads[k,i] <- A[k,1]
k <- k +1
}
View(ADcontrolReads)
A[1,]
a <- A[1,]
b <- A[2,]
c <- A[3,]
d <- A[4,]
e <- A[5,]
ADcontrolReads <- data.frame(c(a,b,c,d,e))
ADcontrolReads <- data.frame(a,b,c,d,e)
View(ADcontrolReads)
ADcontrolReads <- data.frame(cbind(a,b,c,d,e))
ADcontrolReads <- data.frame(a)
View(ADcontrolReads)
ADcontrolReads <- read.table("ADcontrol.txt")
ADcontrolReads <- read.table("ADcontrolreads.txt")
View(ADcontrolReads)
ADFlares <- read.table("FlareReads.txt")
ADControls <- read.table("ADcontrolReads.txt")
View(ADFlares)
